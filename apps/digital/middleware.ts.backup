import { NextRequest, NextResponse } from 'next/server';
import { paymentMiddleware } from 'x402-next';
import { prisma } from '@workspace/database/client';

// Import x402 utilities for dynamic middleware (only used in /api/digital/download/*)
let x402Utils: {
  exact: any;
  useFacilitator: any;
} | null = null;

async function getX402Utils() {
  if (!x402Utils) {
    const [{ exact }, { useFacilitator }] = await Promise.all([
      import('x402/schemes'),
      import('x402/verify')
    ]);
    x402Utils = { exact, useFacilitator };
  }
  return x402Utils;
}

console.log('üîß Middleware file loading...');
console.log(
  'üìç Wallet address:',
  process.env.NEXT_PUBLIC_SELLER_WALLET_ADDRESS
);

// ============================================================================
// OPTION A: Static x402-next middleware (original working version)
// Routes: /api/download/* - for testing with hardcoded price/wallet
// ============================================================================
const routeConfig = {
  '/api/download/*': {
    price: '$0.01',
    network: 'base-sepolia' as const,
    config: {
      description: 'Digital download - payment required (static test)',
      outputSchema: {
        type: 'object',
        properties: {
          message: { type: 'string' },
          productId: { type: 'string' }
        }
      }
    }
  }
};

console.log('üìã Static route config:', JSON.stringify(routeConfig, null, 2));

const x402StaticMiddleware = paymentMiddleware(
  (process.env.NEXT_PUBLIC_SELLER_WALLET_ADDRESS ||
    '0x0000000000000000000000000000000000000000') as `0x${string}`,
  routeConfig,
  {
    url: 'https://x402.org/facilitator'
  }
);

console.log('‚úÖ Static middleware configured: /api/download/*');

// ============================================================================
// OPTION B: Dynamic custom middleware (new PoC version)
// Routes: /api/digital/download/* - for dynamic price/wallet from database
// ============================================================================
console.log('‚úÖ Dynamic middleware configured: /api/digital/download/*');

// Main middleware router
export async function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname;

  // Route A: Static test middleware (original working version)
  if (pathname.startsWith('/api/download/')) {
    console.log('\nÔøΩ ============ STATIC MIDDLEWARE ============');
    console.log('ÔøΩ URL:', request.url);
    console.log('ÔøΩ Using: x402-next paymentMiddleware (static)');
    
    const response = await x402StaticMiddleware(request);
    
    console.log('üîµ Status:', response?.status);
    console.log('üîµ ============ END STATIC ============\n');
    
    return response;
  }

  // Route B: Dynamic custom middleware (new PoC)
  if (pathname.startsWith('/api/digital/download/')) {
    console.log('\nÔøΩ ============ DYNAMIC MIDDLEWARE ============');
    console.log('üü¢ URL:', request.url);
    console.log('üü¢ Using: Custom dynamic middleware with DB query');
    
    const productId = pathname.split('/').pop();
    console.log('üü¢ Product ID:', productId);

    // Query database for product
    const product = await prisma.digitalProduct.findUnique({
      where: { id: productId }
    });

    if (!product) {
      console.log('‚ùå Product not found');
      return new NextResponse('Product not found', { status: 404 });
    }

    console.log('üì¶ Product:', product.title);
    console.log('üí∞ Price:', product.price, 'USDC units');
    console.log('üëõ Seller wallet:', product.sellerWallet);

    // Build dynamic payment requirements from database
    const paymentRequirements = {
      scheme: 'exact' as const,
      network: 'base-sepolia' as const,
      maxAmountRequired: product.price.toString(),
      resource: `${request.nextUrl.protocol}//${request.nextUrl.host}${pathname}`,
      description: `Download ${product.title}`,
      mimeType: 'application/json',
      payTo: product.sellerWallet as `0x${string}`,
      maxTimeoutSeconds: 300,
      asset: '0x036CbD53842c5426634e7929541eC2318f3dCF7e' as `0x${string}`,
      outputSchema: {
        input: {
          type: 'http' as const,
          method: 'GET' as const,
          discoverable: true
        },
        output: {
          type: 'object' as const,
          properties: {
            message: { type: 'string' as const },
            productId: { type: 'string' as const }
          }
        }
      },
      extra: {
        name: 'USDC',
        version: '2'
      }
    };

    const paymentHeader = request.headers.get('X-PAYMENT');

    // No payment? Return 402 with dynamic requirements
    if (!paymentHeader) {
      console.log('ÔøΩ No payment header - returning 402');
      return new NextResponse(
        JSON.stringify({
          x402Version: 1,
          error: 'X-PAYMENT header is required',
          accepts: [paymentRequirements]
        }),
        {
          status: 402,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    console.log('ÔøΩ Payment header received, verifying...');

    // Decode payment (using x402 utilities via dynamic import to avoid compile errors)
    let decodedPayment;
    try {
      // Dynamic import to avoid top-level import errors
      const { exact } = await import('x402/schemes');
      decodedPayment = exact.evm.decodePayment(paymentHeader);
      decodedPayment.x402Version = 1;
      console.log('‚úÖ Payment decoded successfully');
    } catch (error) {
      console.log('‚ùå Payment decode failed:', error);
      return new NextResponse(
        JSON.stringify({
          x402Version: 1,
          error: 'Invalid payment',
          accepts: [paymentRequirements]
        }),
        { status: 402, headers: { 'Content-Type': 'application/json' } }
      );
    }

    // Verify payment using x402 facilitator
    try {
      const { useFacilitator } = await import('x402/verify');
      const { verify, settle } = useFacilitator({
        url: 'https://x402.org/facilitator'
      });

      console.log('üîç Calling facilitator verify...');
      const verification = await verify(decodedPayment, paymentRequirements);

      if (!verification.isValid) {
        console.log('‚ùå Verification failed:', verification.invalidReason);
        return new NextResponse(
          JSON.stringify({
            x402Version: 1,
            error: verification.invalidReason,
            accepts: [paymentRequirements],
            payer: verification.payer
          }),
          { status: 402, headers: { 'Content-Type': 'application/json' } }
        );
      }

      console.log('‚úÖ Verification successful!');
      console.log('ÔøΩ Payer:', verification.payer);

      // Let request through to API route
      const response = NextResponse.next();

      // Settle payment (move money on blockchain)
      console.log('ÔøΩ Settling payment...');
      const settlement = await settle(decodedPayment, paymentRequirements);

      if (settlement.success) {
        console.log('‚úÖ Settlement successful!');
        console.log('üìù Transaction:', settlement.transaction);

        // Add transaction hash to response headers
        response.headers.set(
          'X-PAYMENT-RESPONSE',
          Buffer.from(
            JSON.stringify({
              success: true,
              transaction: settlement.transaction,
              network: settlement.network,
              payer: settlement.payer
            })
          ).toString('base64')
        );

        // Store settlement in database
        await prisma.downloadToken.create({
          data: {
            productId: product.id,
            token: settlement.transaction,
            expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24h
          }
        });

        console.log('üíæ Download token created');
      }

      console.log('ÔøΩ ============ END DYNAMIC ============\n');
      return response;
    } catch (error) {
      console.log('‚ùå Settlement failed:', error);
      return new NextResponse(
        JSON.stringify({
          x402Version: 1,
          error: error instanceof Error ? error.message : 'Settlement failed',
          accepts: [paymentRequirements]
        }),
        { status: 402, headers: { 'Content-Type': 'application/json' } }
      );
    }
  }

  // No matching route - pass through
  return NextResponse.next();
}

// Configure which paths the middleware should run on
// Note: Next.js 15 uses specific matcher syntax
// See: https://nextjs.org/docs/app/building-your-application/routing/middleware#matcher
export const config = {
  matcher: [
    '/api/download/:path*'
    // Alternative patterns to try:
    // '/api/download/(.*)',
  ]
};
